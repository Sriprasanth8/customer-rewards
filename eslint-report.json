[
    {
        "filePath": "/Users/prasanthalagesan/Desktop/Learning/Infy/customer-rewards/src/App.jsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/Users/prasanthalagesan/Desktop/Learning/Infy/customer-rewards/src/components/customTable.jsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/Users/prasanthalagesan/Desktop/Learning/Infy/customer-rewards/src/errorHandler/fallBackUI.jsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/Users/prasanthalagesan/Desktop/Learning/Infy/customer-rewards/src/main.jsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/Users/prasanthalagesan/Desktop/Learning/Infy/customer-rewards/src/screens/dashBoard/dashBoard.jsx",
        "messages": [
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has a missing dependency: 'makeAPIcall'. Either include it or remove the dependency array.",
                "line": 20,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 20,
                "endColumn": 10,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [makeAPIcall]",
                        "fix": {
                            "range": [
                                960,
                                962
                            ],
                            "text": "[makeAPIcall]"
                        }
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { useEffect, useState, useMemo, useRef } from \"react\";\nimport * as Services from \"../../services/rewardServices\";\nimport { calculateRewardPoints } from \"../../utils/rewardCalculation\";\nimport TotalRewards from \"./sections/totalRewards\";\nimport MonthlyRewards from \"./sections/monthlyRewards\";\nimport Transactions from \"./sections/transactions\";\nimport { GetYearMonthDateFormat } from \"../../utils/dateFormatting\";\n\nconst DashBoard = () => {\n    const [fromDate, setFromDate] = useState(GetYearMonthDateFormat(new Date().setMonth(new Date().getMonth()-3)));\n    const [toDate, setToDate] = useState(GetYearMonthDateFormat(new Date()));\n    const [timePeriodErr, setTimePeriodErr] = useState(undefined);\n    const [transactionInfo, setTransactionInfo] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(undefined);\n    let apiCallLog = useRef(0);\n\n    useEffect(() => {\n        makeAPIcall();\n    }, [])\n\n    const dateValidationtion = () => {\n        if (new Date(fromDate) <= (toDate == \"\" ? new Date() : new Date(toDate))) {\n            setTimePeriodErr(undefined);\n            return true;\n        }\n        setTimePeriodErr(\"From date should not be greater than To date.\");\n        apiCallLog.current = 0;\n        setTransactionInfo([]);\n        return false;\n    }\n\n    const NumberValidation = (num) => {\n        if (isNaN(num) || num < 0) return 0;\n        return num;\n    }\n\n    const makeAPIcall = () => {\n        if (dateValidationtion()) {\n            setLoading(true);\n            // setTimeout(() => \n            let obj = {\n                from: fromDate,\n                to: toDate\n            }\n            Services.getTransactions(obj)\n                .then((res) => {\n                    res.map((val) => {\n                        val.totalPrice = parseFloat(NumberValidation(val.totalPrice));\n                        val.rewardPoints = calculateRewardPoints(val.totalPrice);\n                        return val;\n                    });\n                    setTransactionInfo(res);\n                })\n                .catch((err) => {\n                    // console.error(err);\n                    setError(err);\n                })\n                .finally(() => {\n                    apiCallLog.current += 1;\n                    setLoading(false);\n                })\n            if (toDate == \"\") {\n                setToDate(GetYearMonthDateFormat(new Date()))\n            }\n            // ,5000);\n        }\n    }\n\n    const totalRevenue = useMemo(() => transactionInfo.reduce((acc, val) => val.totalPrice + acc, 0.00), [transactionInfo]);\n\n    const setDate = (e) => {\n        if (e.target.name == \"reset\") {\n            setFromDate(\"\");\n            setToDate(\"\");\n            setTransactionInfo([]);\n            setTimePeriodErr(undefined);\n            apiCallLog.current = 0;\n        }\n        else if (e.target.name == \"fromDate\")\n            setFromDate(e.target.value);\n        else\n            setToDate(e.target.value);\n    }\n\n    return (\n        <>\n            <nav className=\"navbar navbar-light bg-light\">\n                <h1>Sea Store</h1>\n            </nav>\n            {loading ?\n                <div className=\"text-center my-5\">\n                    <div className=\"spinner-border text-primary\" role=\"status\" />\n                    <p className=\"mt-3\">Loading...</p>\n                </div>\n                :\n                error ?\n                    <div className=\"text-center my-5\">\n                        <h3 className=\"text-danger mt-3\">ERROR!</h3>\n                        <p className=\"mt-1\">{error}</p>\n                        <button className=\"btn mt-3 border border-dark\" onClick={() => window.location.reload()}>Reload</button>\n                    </div>\n                    :\n                    <>\n                        <div className=\"container-fluid my-3\">\n                            <div className=\"row\">\n                                <div className=\"col-12 col-md-4 py-3 d-flex border-right\">\n                                    <div className=\"my-auto mx-auto\">\n                                        <small>Welcome back</small>\n                                        <h2 className=\"text-primary h1\">Ortho!</h2>\n                                    </div>\n                                </div>\n                                <div className=\"col-6 col-md-4 py-3 text-center border-right\">\n                                    <h3>Revenue</h3>\n                                    <h2 className=\"text-primary\">${totalRevenue.toFixed(2)}</h2>\n                                    <small>*based on selected transaction period.</small>\n                                </div>\n                                <div className=\"col-6 col-md-4 py-3 text-center\">\n                                    <h3>Total Transaction</h3>\n                                    <h2 className=\"text-primary\">{transactionInfo.length}</h2>\n                                    <small>*based on selected transaction period.</small>\n                                </div>\n                            </div>\n                        <hr />\n                        </div>\n                        <div className=\"container-fluid\">\n                            <h2>Filter</h2>\n                            <div className=\"row\">\n                                <div className=\"col-12 col-md-2\">\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"fromDate\">From Date</label>\n                                        <input type=\"date\" name=\"fromDate\" max={GetYearMonthDateFormat(new Date())} value={fromDate} onChange={(e) => setDate(e)} className=\"form-control border-dark\" />\n                                    </div>\n                                </div>\n                                <div className=\"col-12 col-md-2\">\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"toData\">To Date</label>\n                                        <input type=\"date\" name=\"toDate\" max={GetYearMonthDateFormat(new Date())} value={toDate} onChange={(e) => setDate(e)} className=\"form-control border-dark\" />\n                                    </div>\n                                </div>\n                                <div className=\"col-12 col-md-2 d-flex\">\n                                    <button className=\"mt-auto mb-3 border-light bg-primary btn text-white w-100\" onClick={() => makeAPIcall()} disabled={fromDate == \"\"}>Filter</button>\n                                </div>\n                                <div className=\"col-12 col-md-2 d-flex\">\n                                    <button className=\"mt-auto mb-3 border-primary btn w-100\" name=\"reset\" onClick={(e) => setDate(e)} disabled={fromDate == \"\" && toDate == \"\"}>Reset</button>\n                                </div>\n                            </div>\n                            {timePeriodErr && <p className=\"text-danger\">{timePeriodErr}</p>}\n                        <hr />\n                        </div>\n                        {transactionInfo.length != 0 ?\n                            <div className=\"container-fluid text-center\">\n                                <Transactions transactionInfo={transactionInfo} />\n                                <hr />\n                                <TotalRewards transactionInfo={transactionInfo} />\n                                <hr />\n                                <MonthlyRewards transactionInfo={transactionInfo} fromDate={fromDate} toDate={toDate} apiCallLog={apiCallLog} />\n                            </div>\n                            :\n                            <p className={`text-center h5 my-5 ${(apiCallLog.current != 0) ? \"text-danger\" : \"text-success\"}`}>\n                                {(apiCallLog.current != 0) ? \"No data found\" : \"Select the time period to get data\"}\n                            </p>\n                        }\n                    </>\n            }\n            <footer className=\"text-center bg-light p-4 mt-4\">\n                &copy; Prasanth Alagesan\n            </footer>\n        </>\n    );\n};\n\nexport default DashBoard;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/Users/prasanthalagesan/Desktop/Learning/Infy/customer-rewards/src/screens/dashBoard/sections/monthlyRewards.jsx",
        "messages": [
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "The 'groupByMonthKey' object makes the dependencies of useMemo Hook (at line 59) change on every render. To fix this, wrap the initialization of 'groupByMonthKey' in its own useMemo() Hook.",
                "line": 23,
                "column": 11,
                "nodeType": "VariableDeclarator",
                "endLine": 23,
                "endColumn": 31
            }
        ],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { useState, useMemo } from \"react\";\nimport { CustomSorting } from \"../../../utils/customSorting\";\nimport CustomTable from \"../../../components/customTable\";\nimport { GetYearMonthFormat, GetYearFullMonthFormat } from \"../../../utils/dateFormatting\";\nimport PropTypes from \"prop-types\";\n\nconst customTdStyle = {\n    maxHeight: \"100px\",\n    overflowX: \"hidden\",\n    overflowY: \"auto\",\n    display: \"block\",\n    whiteSpace: \"normal\",\n    margin: \"0 0 .5rem 0\"\n}\n\nconst MonthlyRewards = ({ transactionInfo, fromDate, toDate }) => {\n    const [searchName, setSearchName] = useState(\"\");\n    const [sortConfig, setSortConfig] = useState({ key: \"customerId\", direction: \"asc\" });\n\n    let localFromDate = new Date(fromDate);\n    let localToDate = new Date(toDate);\n\n    const groupByMonthKey = {};\n\n    for (let i = localFromDate; i <= localToDate; i.setMonth(i.getMonth() + 1)) {\n        const key = GetYearMonthFormat(new Date(i));\n        if (!groupByMonthKey[key]) {\n            groupByMonthKey[key] = {\n                totalPrice: 0,\n                totalRewards: 0\n            };\n        }\n    }\n\n    const deepClone = (obj) =>\n        Object.fromEntries(\n            Object.entries(obj).map(([key, value]) => [key, { ...value }])\n        );\n\n    let data = useMemo(() => {\n        let result = {};\n\n        for (let i = 0; i < transactionInfo.length; i++) {\n            const curr = transactionInfo[i];\n            const id = curr.customerId;\n            if (!result[id]) {\n                result[id] = {\n                    customerId: id,\n                    customerName: curr.customerName,\n                    groupByMonth: deepClone(groupByMonthKey)\n                };\n            }\n            const key = GetYearMonthFormat(new Date(curr.purchaseDate));\n            result[id].groupByMonth[key].totalPrice += curr.totalPrice;\n            result[id].groupByMonth[key].totalRewards += curr.rewardPoints;\n        }\n\n        return Object.values(result);\n    }, [transactionInfo, groupByMonthKey]);\n\n    data = useMemo(() => data.filter(txn =>\n        (txn.customerName ?? \"\").toLowerCase().includes(searchName.toLowerCase())\n    ), [data, searchName]);\n\n    data = useMemo(() => CustomSorting(data, sortConfig), [data, sortConfig]);\n\n    const handleSearchChange = (e) => {\n        setSearchName(e.target.value);\n    }\n\n    const tableHeader = [\n        {\n            name: \"Customer Id\",\n            dataField: \"customerId\",\n            sorting: true\n        },\n        {\n            name: \"Customer Name\",\n            dataField: \"customerName\",\n            sorting: true,\n            filtering: {\n                name: \"searchByName\",\n                value: searchName,\n                handleValue: handleSearchChange\n            }\n        },\n        {\n            name: <div className='row'>\n                <div className='col-4'>Months</div>\n                <div className='col-4'>Total Purchase</div>\n                <div className='col-4'>Total Rewards</div>\n            </div>,\n            dataField: \"groupByMonth\",\n            style: (Object.entries(groupByMonthKey).length > 3) ? customTdStyle : null,\n            formatter: (val) =>\n                Object.entries(val).map(([key, value]) =>\n                    <div className='row'>\n                        <div className='col-4'>{GetYearFullMonthFormat(key)}</div>\n                        <div className='col-4 text-right'>{value.totalPrice}</div>\n                        <div className='col-4 text-right'>{value.totalRewards}</div>\n                    </div>\n                )\n        }\n    ]\n\n    return (\n        <>\n            <h2 className=\"my-4\">Monthly Rewards</h2>\n            <CustomTable\n                tableHeader={tableHeader}\n                tableData={data}\n                sortConfig={sortConfig}\n                setSortConfig={setSortConfig}\n            />\n        </>\n    )\n}\n\nexport default MonthlyRewards;\n\nMonthlyRewards.propTypes = {\n    transactionInfo: PropTypes.object.isRequired,\n    fromDate: PropTypes.string.isRequired,\n    toDate: PropTypes.string.isRequired\n}",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/Users/prasanthalagesan/Desktop/Learning/Infy/customer-rewards/src/screens/dashBoard/sections/totalRewards.jsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/Users/prasanthalagesan/Desktop/Learning/Infy/customer-rewards/src/screens/dashBoard/sections/transactions.jsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/Users/prasanthalagesan/Desktop/Learning/Infy/customer-rewards/src/services/rewardServices.js",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/Users/prasanthalagesan/Desktop/Learning/Infy/customer-rewards/src/utils/customSorting.js",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/Users/prasanthalagesan/Desktop/Learning/Infy/customer-rewards/src/utils/dateFormatting.js",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/Users/prasanthalagesan/Desktop/Learning/Infy/customer-rewards/src/utils/rewardCalculation.js",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    }
]